{"version":3,"sources":["api/api.js","api/posts.js","components/PostsList/PostsList.jsx","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/Loader/Loader.jsx","components/PostDetails/PostDetails.jsx","App.jsx","api/users.js","index.js"],"names":["request","url","options","fetch","then","response","ok","Error","status","statusText","json","result","data","getPosts","PostsList","posts","selectedPostId","setPostId","className","map","id","userId","title","key","type","onClick","getPostComments","postId","deleteComment","commentId","method","addComment","comment","headers","body","JSON","stringify","NewCommentForm","onAdd","useState","name","setName","email","setEmail","setBody","onSubmit","event","preventDefault","placeholder","value","onChange","target","required","Loader","PostDetails","post","setPost","comments","setComments","commentShown","setCommentShown","useEffect","onDeleteComment","a","length","currentList","App","setPosts","users","setUsers","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bbc04475.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  })\n  .then(result => result.data);\n\nexport const post = (url, data) => request(url, {\n  method: 'POST',\n  headers: {\n    'Content-type': 'application/json; charset=utf-8',\n  },\n  body: JSON.stringify(data),\n});\n\nexport const remove = url => request(url, { method: 'DELETE' });\n","import { request } from './api';\n\nexport const getPosts = () => request('/posts');\n\nexport const getUserPosts = userId => request(`/posts?userId=${userId}`);\n\nexport const getPostDetails = postId => request(`/posts/${postId}`);\n","import React from 'react';\n\nimport './PostsList.scss';\n\nimport PropTypes from 'prop-types';\n\nexport const PostsList = ({\n  posts,\n  selectedPostId,\n  setPostId,\n}) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(({ id, userId, title }) => (\n        <li key={id} className=\"PostsList__item\">\n          <div>\n            <b>{`[User #${userId}]: `}</b>\n            {title}\n          </div>\n          {id === selectedPostId ? (\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => setPostId(0)}\n            >\n              Close\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => setPostId(id)}\n            >\n              Open\n            </button>\n          )}\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n  })).isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n  setPostId: PropTypes.func.isRequired,\n};\n","import { post, remove, request } from './api';\n\nexport const getPostComments = postId => request(`/comments?postId=${postId}`);\n\nexport const deleteComment = commentId => remove(`/comments/${commentId}`);\n\nexport const addComment = comment => post(`/comments`, comment);\n","import React, { useState } from 'react';\n\nimport './NewCommentForm.scss';\n\nimport PropTypes from 'prop-types';\n\nexport const NewCommentForm = ({ onAdd }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const addComment = () => {\n    onAdd(name, email, body);\n\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        addComment();\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={({ target }) => {\n            setName(target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={({ target }) => {\n            setEmail(target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={({ target }) => {\n            setBody(target.value);\n          }}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\n\nimport './PostDetails.scss';\n\nimport PropTypes from 'prop-types';\n\nimport { getPostDetails } from '../../api/posts';\nimport { addComment, deleteComment, getPostComments } from '../../api/comments';\n\nimport { NewCommentForm } from '../NewCommentForm';\n\nimport { Loader } from '../Loader';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [post, setPost] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [commentShown, setCommentShown] = useState(true);\n\n  useEffect(() => {\n    getPostDetails(selectedPostId).then(setPost);\n    getPostComments(selectedPostId).then(setComments);\n  }, [selectedPostId]);\n\n  if (!post) {\n    return (\n      <Loader />\n    );\n  }\n\n  const onDeleteComment = async(commentId) => {\n    await deleteComment(commentId);\n    await getPostComments(selectedPostId).then(setComments);\n  };\n\n  const addNewComment = (name, email, body) => {\n    const comment = {\n      name,\n      email,\n      body,\n      postId: selectedPostId,\n    };\n\n    addComment(comment)\n      .then((result) => {\n        setComments(currentList => [...currentList, result]);\n      });\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post.body}</p>\n      </section>\n\n      {comments.length > 0 ? (\n        <section className=\"PostDetails__comments\">\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => setCommentShown(!commentShown)}\n          >\n            {commentShown ? 'Hide comments' : 'Show comments'}\n          </button>\n\n          {commentShown && (\n            <ul className=\"PostDetails__list\">\n              {comments.map(({ id, body }) => (\n                <li key={id} className=\"PostDetails__list-item\">\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => onDeleteComment(id)}\n                  >\n                    X\n                  </button>\n                  <p>{body}</p>\n                </li>\n              ))}\n            </ul>\n          )}\n        </section>\n      ) : (\n        <>\n          <p>No comments</p>\n          <br />\n        </>\n      )}\n      <br />\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm onAdd={addNewComment} />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { getPosts, getUserPosts } from './api/posts';\nimport { getUsers } from './api/users';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [selectedPostId, setPostId] = useState(0);\n\n  useEffect(() => {\n    getPosts().then(setPosts);\n    getUsers().then(setUsers);\n  }, []);\n\n  const selectUserPosts = ({ target }) => {\n    if (+target.value === 0) {\n      getPosts().then(setPosts);\n    }\n\n    getUserPosts(target.value).then(setPosts);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={selectUserPosts}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(({ id, name }) => (\n              <option value={id} key={id}>\n                {name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectedPostId={selectedPostId}\n            setPostId={setPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId ? (\n            <PostDetails selectedPostId={selectedPostId} />\n          ) : (\n            <h3>Open a post to see details</h3>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { request } from './api';\n\nexport const getUsers = () => request('/users');\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}